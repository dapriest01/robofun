{"version":3,"sources":["Component/Card.js","Component/Cardlist.js","Component/robots.js","Component/SearchBox.js","Component/Scrolla.js","Container/App.js","serviceWorker.js","index.js"],"names":["card","props","className","alt","src","id","name","email","Cardlist","robots","cardComponent","map","user","i","Card","key","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Scrolla","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAceA,EAXF,SAACC,GACV,OACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAK,QAAQC,IAAG,+BAA2BH,EAAMI,GAAjC,cACrB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCOXC,EAXE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACVC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,kBAAEC,EAAF,CAAOC,IAAMF,EAAGR,GAAKI,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAQE,EAAOI,GAAGN,WAGtF,OACA,6BACKG,EADL,MCXSD,EAAS,CACpB,CACEJ,GAAI,EACJC,KAAM,gBACNU,SAAU,OACVT,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNU,SAAU,YACVT,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNU,SAAU,WACVT,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNU,SAAU,WACVT,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNU,SAAU,SACVT,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNU,SAAU,mBACVT,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNU,SAAU,eACVT,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNU,SAAU,gBACVT,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNU,SAAU,WACVT,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNU,SAAU,iBACVT,MAAO,0BAET,CACEF,GAAI,GACJC,KAAM,mBACNU,SAAU,cACVT,MAAO,0BCjDIU,EAbG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKjB,UAAU,OACX,2BACAA,UAAU,mCACTkB,KAAM,SACNC,YAAY,gBACZC,SAAUH,MCDRI,G,MAPA,SAACtB,GACZ,OACI,yBAAKuB,MAAO,CAAEC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,UACjE1B,EAAM2B,YCgCFC,E,YA7BZ,aAAe,IAAD,8BACV,+CAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACd,YAAca,EAAME,OAAOC,SAP1C,EAAKC,MAAQ,CACT1B,OAASA,EACTS,YAAa,IAJP,E,sEAaJ,IAAD,OACCkB,EAAiBC,KAAKF,MAAM1B,OAAO6B,QAAO,SAAA7B,GAC7C,OAAOA,EAAOH,KAAKiC,cAAcC,SAAS,EAAKL,MAAMjB,YAAYqB,kBAEpE,OACI,yBAAKrC,UAAU,MACX,wBAAIA,UAAU,MAAd,YACA,kBAAC,EAAD,CAAWiB,aAAckB,KAAKP,iBAC9B,kBAACW,EAAD,KACI,kBAAC,EAAD,CAAUhC,OAAQ2B,U,GAvBpBM,a,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OACD,kBAAE,EAAF,MACFC,SAASC,eAAe,SDkHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.94ceedb4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst card = (props) => {\r\n    return (\r\n        <div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt= 'robot' src= {`https://robohash.org/${props.id}?150x150`} />\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst Cardlist = ( {robots}) => {\r\n    const cardComponent = robots.map((user, i) =>{\r\n        return < Card key ={i} id= {robots[i].id} name={robots[i].name} email= {robots[i].email}/>\r\n    }) \r\n    \r\n    return (\r\n    <div>\r\n        {cardComponent};\r\n    </div> \r\n    );\r\n}\r\nexport default Cardlist;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  },\n  {\n    id: 11,\n    name: 'Oluwafemi Priest',\n    username: 'femi.priest',\n    email: 'femi.priest@gmail.com'\n  }\n];\n","import React from 'react';\r\n\r\n\r\nconst SearchBox = ( {searchfield, searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n             type= 'search'\r\n             placeholder='search robots'\r\n             onChange={searchChange}\r\n             />\r\n        </div>\r\n      \r\n    )\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border:'7px solid black', height: '800px'}}>\r\n           {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport Cardlist from '../Component/Cardlist';\r\nimport {robots} from '../Component/robots';\r\nimport SearchBox from '../Component/SearchBox';\r\nimport '../Container/App.css';\r\nimport Scrolla from'../Component/Scrolla';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots : robots,\r\n            searchfield :''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield : event.target.value} )\r\n       \r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n           return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robo-FUN</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scrolla>\r\n                    <Cardlist robots={filteredRobots}/>\r\n                </Scrolla>\r\n            \r\n            </div>\r\n          \r\n        );\r\n    }\r\n}export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\n//import Card from './Card';\nimport {robots} from './Component/robots';\nimport 'tachyons';\nimport Cardlist from './Component/Cardlist';\nimport scroll from './Component/Scrolla';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n        < App/>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}